Polymorphism
n programming languages and type theory, polymorphism (from Greek πολύς, polys, "many, much" and μορφή, morphē, "form, shape") is the provision of a single
interface to entities of different types.
A polymorphic type is a type whose operations can also be applied to values of some other type, or types.

There are several fundamentally different kinds of polymorphism:

- (Ad hoc polymorphism) If a function denotes different and potentially heterogeneous implementations depending on a limited range
of individually specified types and combinations, it is called ad hoc polymorphism.
Ad hoc polymorphism is supported in many languages using function overloading.

- (Parametric polymorphism) If the code is written without mention of any specific type and thus can be used transparently with any number of new types,
it is called parametric polymorphism. In the object-oriented programming community,                                                      this is often known as generics or generic programming.
 In the functional programming community, this is often simply called polymorphism.

 - (Subtyping) Subtyping (or inclusion polymorphism) is a concept wherein a name may denote instances of many different classes as
 long as they are related by some common superclass. In object-oriented programming, this is often referred to simply as polymorphism.