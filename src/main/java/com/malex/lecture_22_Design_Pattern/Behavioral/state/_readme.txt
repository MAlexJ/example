   ***********  State *********

Состояние (англ. State) — поведенческий шаблон проектирования.
Используется в тех случаях, когда во время выполнения программы объект должен
менять свое поведение в зависимости от своего состояния

Основная идея в том, что программа может находиться в одном из нескольких состояний,
которые всё время сменяют друг друга. Набор этих состояний,
а также переходов между ними, предопределён и конечен.
Находясь в разных состояниях, программа может по-разному реагировать на одни
и те же события, которые происходят с ней.

Такой подход можно применить и к отдельным объектам.
Например, объект Документ может принимать три состояния:
Черновик, Модерация или Опубликован.
В каждом из этих состоянии метод опубликовать будет работать по-разному:

Из черновика он отправит документ на модерацию.
Из модерации — в публикацию, но при условии, что это сделал администратор.
В опубликованном состоянии метод не будет делать ничего.

Очень важным нюансом, отличающим этот паттерн от Стратегии, является то, что и контекст,
и сами конкретные состояния могут знать друг о друге и инициировать переходы от одного состояния к другому.
link: https://refactoring.guru/ru/design-patterns/state

http://rsdn.ru/article/patterns/State.xml

http://info.javarush.ru/translation/2014/10/06/%D0%A0%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-%D0%BF%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D0%BC%D0%B8-%D0%A1%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F-%D0%B2-Java.html

http://java67.blogspot.sg/2012/09/top-10-java-design-pattern-interview-question-answer.html

http://www.tutorialspoint.com/design_pattern/state_pattern.htm